hist(college$Grad.Rate)
View(college)
View(college)
## vectors are fundamental
x <- c(1,3,2,5)
s1 <- college[,c(16:19)]
pairs(s1)
plot(college$S.F.Ratio, college$Grad.Rate)
View(private)
View(private)
## see ../data/README.txt
college <- read.csv("data/College.csv")
setwd("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/W2L1/RLab6105/programs")
## see ../data/README.txt
college <- read.csv("data/College.csv")
getwd()
## see ../data/README.txt
college <- read.csv("data/College.csv")
## data prep
college <- read.csv("data/College.csv")
rownames(college) <- college$X
View(college)
View(college)
View(college)
## data prep
college <- read.csv("data/College.csv")
rownames(college) <- college$X
college <- college[college$Grad.Rate < 100,]
college <- read.csv("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/W2L1/RLab6105/data/College.csv")
## ggplot2:
qplot(college$S.F.Ratio, college$Grad.Rate)
qplot(S.F.Ratio, Grad.Rate, data = college)
qplot(S.F.Ratio, Grad.Rate, data = college, colour=Private)
library(ggplot2)
college <- read.csv("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/W2L1/RLab6105/data/College.csv")
## ggplot2:
qplot(college$S.F.Ratio, college$Grad.Rate)
qplot(S.F.Ratio, Grad.Rate, data = college)
qplot(S.F.Ratio, Grad.Rate, data = college, colour=Private)
## ggplot2:
qplot(college$S.F.Ratio, college$Grad.Rate)
qplot(S.F.Ratio, Grad.Rate, data = college)
qplot(S.F.Ratio, Grad.Rate, data = college, colour=Private)
## add layers with "+"
qplot(S.F.Ratio, Grad.Rate, data = college, colour=Private) +
ggtitle("College graduation rate vs. Student-faculty ratio")
## histograms are univariate: one variable required
qplot(Grad.Rate, data = college, geom="histogram")
qplot(Grad.Rate, data = college, geom="histogram", binwidth = 2)
## USING ggplot() function and CUSTOMIZING PLOTS
## aes = aesthetics
p <- ggplot(college, aes(x=S.F.Ratio, y=Grad.Rate))
## USING ggplot() function and CUSTOMIZING PLOTS
## aes = aesthetics
p <- ggplot(college, aes(x=S.F.Ratio, y=Grad.Rate))
p
p + geom_point()
p + geom_point(aes(colour = Private))
##p + geom_point(colour = Private)
p + geom_point(colour = "green")
p + geom_point(aes(colour = Private))
p + geom_point(colour = Private)
## nice palette
p + geom_point(aes(colour = Private)) + scale_color_brewer()
p + geom_point(aes(colour = Private)) +
scale_color_brewer(type="qual", palette=2)
## variations on histogram
ggplot(college) +
geom_histogram(aes(x=S.F.Ratio))
p <- ggplot(college, aes(x=S.F.Ratio))
p + geom_histogram()
p + stat_bin(geom="area")
p + stat_bin(geom="point")
p + stat_bin(geom="line")
## OVERLAYS
## The box plot (a.k.a. box and whisker diagram) is a standardized way of displaying the distribution of
## data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.
## http://www.physics.csbsju.edu/stats/box2.html
qplot(Private, Grad.Rate, data = college)
qplot(Private, Grad.Rate, data = college, geom="jitter")
qplot(Private, Grad.Rate, data = college, geom=c("jitter", "boxplot"))
qplot(Private, Grad.Rate, data = college, geom=c("boxplot", "jitter"))
qplot(Private, Grad.Rate, data = college, geom=c("boxplot", "jitter"))
p <- ggplot(college, aes(x=Private, y=Grad.Rate))
## documentation example: http://docs.ggplot2.org/current/geom_boxplot.html
p + geom_point()
## documentation example: http://docs.ggplot2.org/current/geom_boxplot.html
p + geom_point()
p + geom_boxplot() + geom_jitter()
p + geom_boxplot() + geom_jitter() + coord_flip()
p + geom_boxplot(notch = TRUE, notchwidth = .5) +
geom_jitter(colour="sienna1")
p <- p + geom_boxplot()
p <- p + geom_point()
p <- p + facet_grid(. ~ Top10quartile)
p <- p + ggtitle("Graduation Rate vs. Student-Faculty Ratio, by Top 10 Quartiles")
## Questions?
p
## data prep
college <- read.csv("data/College.csv")
setwd("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/W2L1/RLab6105/programs")
getwd()
## data prep
college <- read.csv("../data/College.csv")
rownames(college) <- college$X
college$X <- NULL
## see ../data/README.txt
college <- read.csv("College.csv")
## overview of dataset
head(college)
dim(college)
x <- summary(college)
dim(x)
names(college) # gives the name of all the columns
str(college) # gives the name of columns, data type and the first few elements of each column
## select a manageable dataset for the following exercises
df <- college[270:299,]
summary(df)
## data prep
college <- read.csv("../data/College.csv")
rownames(college) <- college$X
college$X <- NULL
college <- college[college$Grad.Rate < 100,]
## Q: is there an association between the graduation rate by student / faculty ratio?
qplot(college$Grad.Rate, college$S.F.Ratio, data = college)
## what patterns do we see?
## library(ggplot2)
qplot(S.F.Ratio, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
summary(lm.fit)
college <- college[college$Grad.Rate < 100,]
## what patterns do we see?
## library(ggplot2)
qplot(S.F.Ratio, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ S.F.Ratio,data=college)
summary(lm.fit)
summary(lm.fit)
## what linear model have we learned?
coef(lm.fit)
confint(lm.fit)
## linear regression diagnostic plots
## need some stats background...
par(mfrow=c(2,2))
lm.fit <- lm(Grad.Rate ~ Top10perc,data=college)
college <- college[college$Grad.Rate < 100,]
## Q: is there an association between the graduation rate by student / faculty ratio?
qplot(college$Grad.Rate, college$S.F.Ratio, data = college)
## what patterns do we see?
## library(ggplot2)
qplot(S.F.Ratio, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ S.F.Ratio,data=college)
summary(lm.fit)
distinct(select(df, S.F.Ratio))
## is there an association between the number of top 10 percent HS
## students and graduation rate?
qplot(Top10perc, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
## is there an association between the number of top 10 percent HS
## students and graduation rate?
qplot(Top10perc, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ Top10perc,data=college)
summary(lm.fit)
## Multiple Regression (multiple independent variables)
lm.fit.mult <- lm(Grad.Rate ~ Top10perc + Private, data=college)
summary(lm.fit.mult)
## linear regression diagnostic plots
## need some stats background...
par(mfrow=c(2,2))
plot(lm.fit)
## linear regression diagnostic plots
## need some stats background...
par(mfrow=c(2,2))
plot(lm.fit)
par(mfrow=c(1,1))
## Multiple Regression (multiple independent variables)
lm.fit.mult <- lm(Grad.Rate ~ Top10perc + Private, data=college)
summary(lm.fit.mult)
plot(college$Top10perc,college$Grad.Rate,col=ifelse(college$Private=="Yes",'red','blue'))
## Multiple Regression (multiple independent variables)
lm.fit.mult <- lm(Grad.Rate ~ Top10perc + Private, data=college)
summary(lm.fit.mult)
par(mfrow=c(1,1))
plot(lm.fit.mult)
confint(lm.fit)
## linear regression diagnostic plots
## need some stats background...
par(mfrow=c(2,2))
plot(lm.fit)
## what about just using every variable?
lm.fit.all <- lm(Grad.Rate ~ ., data=college)
## good fit, but probably "overfit", and all variables are correlated
summary(lm.fit.all)
## guess/predict  if a college is private by its acceptance rate and size
qplot(Private,F.Undergrad, data=college, geom=c("boxplot", "jitter"))
college$AcceptanceRate <- college$Accept / college$Apps
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
college$AcceptanceRate <- college$Accept / college$Apps
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
summary(glm.fit)
## guess/predict  if a college is private by its acceptance rate and size
qplot(Private,F.Undergrad, data=college, geom=c("boxplot", "jitter"))
college$AcceptanceRate <- college$Accept / college$Apps
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
View(college)
View(college)
View(college)
View(college)
college$Private_bool <- as.factor(college$Private)
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
glm.fit <- glm(Private_bool ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
glm.fit <- glm(Private_bool ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
glm.fit <- glm(Private_bool ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
summary(glm.fit)
cbind(exp(cbind(OR = coef(glm.fit), confint(glm.fit))), pval=coef(summary(glm.fit))[,4])
cbind(exp(cbind(OR = coef(glm.fit), confint(glm.fit))), pval=coef(summary(glm.fit))[,4])
## supplement on cbind
a <- c(62.3, 55.3, 65.3, 59.3, 67.3)
b <- c(2.2, 5.4, 1.3, 2.8, 5.4)
c <- c(0.1, 1.5, 1.6, 2.1, 0.3)
mydata <- cbind(a, b, c)
mydata
## (1) Linear regression
## can we predict the number of top 10 percent HS students predicting graduation rate?
qplot(Top10perc, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ Top10perc,data=college)
summary(lm.fit)
## what if we had 4 all new colleges? Could we guess their graudation rate?
newcolleges <- data.frame(
CollegeName=c("MattU","PavoTech","ApoorvaCollege","SheamusInstitute"),
Top10perc=c(50,60,99,5)
)
rownames(newcolleges) <- newcolleges$CollegeName
predict(lm.fit,newdata=newcolleges)
predict(lm.fit,newdata=newcolleges,interval="prediction")
## (2) Logistic regression
## guess if a college is private by its acceptance rate and size
college$AcceptanceRate <- college$Accept / college$Apps
glm.fit <- glm(Private ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
college$Private_bool <- as.factor(college$Private) # converted the private column to factor
glm.fit <- glm(Private_bool ~ AcceptanceRate + F.Undergrad,data=college,family='binomial')
predict(glm.fit,type='response')
## plot the results
p <- predict(glm.fit,type='response')
## plot the results
p <- predict(glm.fit,type='response')
qplot(p[order(p)],col=ifelse(college$Private=="Yes",'red','blue')[order(p)],ylab="Probability of PrivateYes")
legend('bottomright',legend=c("PrivateYes","PrivateNo"),fill=c("red","blue"))
abline(h=0.5,lty=2)
## how often would we have been right?
table(PredictedPrivate=p > .5, isPrivate=college$Private)
## Cross validated model?
college$CV.index <- rep(1:10,length=nrow(college))
for(i in 1:10) {
in.fold <- college$CV.index != i
glm.fit.cv <- glm(Private ~ AcceptanceRate + F.Undergrad, data=college[in.fold,],family='binomial')
p <- predict(glm.fit.cv,type='response',newdata=college[!in.fold,])
college[!in.fold,'prediction'] <- p
}
glm.fit.cv <- glm(Private_bool ~ AcceptanceRate + F.Undergrad, data=college[in.fold,],family='binomial')
table(PredictedPrivate=college$prediction > .5, isPrivate=college$Private)
install.packages("ROCR")
library("ROCR")
pred <- prediction(college$prediction,college$Private=="Yes")
pred <- prediction(college$prediction,college$Private=="Yes")
perf <- performance(pred,measure='tpr',x.measure='fpr')
getwd()
## data prep
college <- read.csv("./data/College.csv")
setwd("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/W2L1/RLab6105")
## data prep
college <- read.csv("/data/College.csv")
## data prep
college <- read.csv("data/College.csv")
## data prep
college <- read.csv("data/College.csv")
rownames(college) <- college$X
rownames(college) <- college$X
View(college)
View(college)
View(college)
## data prep
college <- read.csv("data/College.csv")
View(college)
View(college)
college$college
rownames(college) <- college$X
college$college
college$X <- NULL
## Here we get rid of all party schoold (grad rate = 100%)
college <- college[college$Grad.Rate < 100,]
## what patterns do we see?
## Firt, install ggplot2 by menu: Tools | Install Packages | ggplot2
# Then: Bring the library into scope:
library(ggplot2)
college$X
print(college$X)
college
college$X <- NULL
## Here we get rid of all party schoold (grad rate = 100%)
college <- college[college$Grad.Rate < 100,]
## data prep
college <- read.csv("data/College.csv")
## Here we get rid of all party schoold (grad rate = 100%)
college <- college[college$Grad.Rate < 100,]
## what patterns do we see?
## Firt, install ggplot2 by menu: Tools | Install Packages | ggplot2
# Then: Bring the library into scope:
library(ggplot2)
## and plot the data with the linear regression line
qplot(S.F.Ratio, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
## get more information about the linear regression..
lm.fit <- lm(Grad.Rate ~ S.F.Ratio,data=college)
summary(lm.fit)
## is there an association between the number of top 10 percent HS
## students and graduation rate?
qplot(Top10perc, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ Top10perc,data=college)
summary(lm.fit)
## what linear model have we learned?
coef(lm.fit)
confint(lm.fit)
## (1) Linear regression
## can we predict the number of top 10 percent HS students predicting graduation rate?
qplot(Top10perc, Grad.Rate, data = college, geom=c("point", "smooth"), method=lm)
lm.fit <- lm(Grad.Rate ~ Top10perc,data=college)
summary(lm.fit)
## what if we had 4 all new colleges? Could we guess their graudation rate?
newcolleges <- data.frame(
CollegeName=c("MattU","PavoTech","ApoorvaCollege","SheamusInstitute"),
Top10perc=c(50,60,99,5)
)
rownames(newcolleges) <- newcolleges$CollegeName
predict(lm.fit,newdata=newcolleges)
predict(lm.fit,newdata=newcolleges,interval="prediction")
## what if we had 4 all new colleges? Could we guess their graudation rate?
newcolleges <- data.frame(
CollegeName=c("MattU","PavoTech","ApoorvaCollege","SheamusInstitute"),
Top10perc=c(50,60,99,5)
)
rownames(newcolleges) <- newcolleges$CollegeName
predict(lm.fit,newdata=newcolleges)
predict(lm.fit,newdata=newcolleges,interval="prediction")
install.packages("caret")
library(caret)
data(iris)
# rename the dataset
dataset <- iris
getwd()
ls
dataset <- read.csv("data/" + filename, header=FALSE)
dataset <- read.csv("data/iris.csv", header=FALSE)
dataset <- read.csv("data/iris_csv.csv", header=FALSE)
View(dataset)
View(dataset)
dataset <- read.csv("data/iris_csv.csv", header=TRUE)
# set the column names in the dataset
colnames(dataset) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")
View(dataset)
View(dataset)
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
'''You now have training data in the dataset variable and a
validation set we will use later in the validation variable.
Note that we replaced our dataset variable with the 80%
sample of the dataset. This was an attempt to keep the
rest of the code simpler and readable.'''
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
library(caret)
dataset <- read.csv("data/iris_csv.csv", header=TRUE)
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
View(dataset)
View(dataset)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
dataset <- read.csv("data/iris_csv.csv", header=TRUE)
# set the column names in the dataset
colnames(dataset) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
View(validation_index)
View(validation_index)
typeof(validation_index)
View(validation_index)
View(validation_index)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
View(validation)
View(validation)
View(validation_index)
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# dimensions of dataset
dim(dataset)
# list types for each attribute'''
sapply(dataset, class)
## vectors are fundamental
x <- c(1,3,2,5)
x
y <- c(4,1,1,2)
y
## how does R add?
x+y
x-y
x*y
## some functions
length(x)
ls()
x <- rnorm(50)
y <- x+rnorm(50,mean=50,sd=.1)
cor(x,y)
mean(x)
sd(x)
## moving to two dimensions
mm <- matrix(1:16,nrow=4,ncol=4)
mm
dim(mm)
## subsetting/indexing etc
mm[2,]
mm[,2]
mm[-1,]
mm[c(1,2),]
mm[,c(1,3)]
mm[,-c(1,3)]
mm[,]
## [your code here]
mm[c(3, 4), c(1, 2)] # for rows make it dynamic by selecting last two rows
## [your code here]
mm[c(3, 4), c(1, 2)] # for rows make it dynamic by selecting last two rows
getwd()
setwd("C:/Users/aryan/Desktop/1st Sem/Data Science Engineering and Tools/Assignment2_Snehil_Aryan")
## see ../data/README.txt
college <- read.csv("data/College.csv")
## overview of dataset
head(college)
dim(college)
x <- summary(college)
dim(x)
names(college) # gives the name of all the columns
str(college) # gives the name of columns, data type and the first few elements of each column
## select a manageable dataset for the following exercises
df <- college[270:299,]
summary(df)
## subset data
private <- df[df$Private=="Yes",]
private <- subset(df,Private=="Yes")
## select columns
df2 <- df[,c("X","Private")]
df2
## order data
df3 <- df[order(df$Private),]
df3
library(dplyr)
## overview of `dplyr` is here:
x <- vignette("introduction", "dplyr")
glimpse(college)
glimpse(df)
summary(df)
## (1) "filter rows with filter()"
## first parameter is the data frame, then the conditions
filter(df, Private=="Yes")
filter(df, Private=="Yes" & Grad.Rate > 70)
filter(df, Private=="Yes" & Grad.Rate >= 70)
## (2) "select columns with select()"
## first parameter is the data frame, the remaining are column names
select(df, X, Private, S.F.Ratio, Grad.Rate, Top10perc)
## (3) "arrange rows with arrange()"
## first parameter is the data frame
arrange(df, Private)
arrange(df, desc(Private))
df
## [your code here]
select(df, X, Grad.Rate) %>% filter(Grad.Rate >= 80) %>% arrange(desc(Grad.Rate))
## (4) "extract distinct (unique) rows"
select(df, S.F.Ratio)
distinct(select(df, S.F.Ratio))
dim(distinct(select(df, Agency.Name)))
## (5) "add new columns with mutate()"
head(df)
mutate(df, cost=Personal+Books)
dfx <- select(df,Personal,Books)
dfx <- mutate(dfx, cost=Personal+Books)
dfx
## (6) "summarise values with summarise()" [minimizes output]
## summarise() "reduces" the size of the output
summarise(df, books=sum(Books))
summarise(df, mean.tuition=mean(Outstate))
## summarise() is really powerful when working in groups
dfx <- group_by(df, Private)
dfx <- summarise(dfx, mean.tuition=mean(Outstate))
dfx
dfx <- group_by(df, Private)
dfx <- summarise(dfx, mean.books=mean(Books))
dfx
dfx <- group_by(df, Private)
dfx <- summarise(dfx, count=n())
dfx
## [your code here]
#For 'df'
dfx <- group_by(df, Private)
## [your code here]
#For 'df'
dfx <- group_by(df, Private)
dfx <- summarize(dfx, max = max(Outstate), min= min(Outstate))
dfx
#For 'college'
collegex <- group_by(college, Private)
collegex <- summarize(collegex, max = max(Outstate), min= min(Outstate))
collegex
